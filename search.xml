<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2018%2F11%2F18%2Ftest%2F</url>
    <content type="text"><![CDATA[test tittletest2test 3]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vuex 的actions 和 mutations 的使用场景]]></title>
    <url>%2F2017%2F08%2F05%2Fvuex%2F</url>
    <content type="text"><![CDATA[可以看一下知乎上作者的回答 区分 actions 和 mutations 并不是为了解决竞态问题，而是为了能用 devtools 追踪状态变化。事实上在 vuex 里面 actions 只是一个架构性的概念，并不是必须的，说到底只是一个函数，你在里面想干嘛都可以，只要最后触发 mutation 就行。异步竞态怎么处理那是用户自己的事情。vuex 真正限制你的只有 mutation 必须是同步的这一点（在 redux 里面就好像 reducer 必须同步返回下一个状态一样）。 既然设计出来，我的理解可以这样使用： 异步操作天然要定义成 action 可以把 mutation 看作单一职责，actions 是 mutation 的组合体 也就是说，如果多个函数对 state 做了同样的操作，应该把这些操作提取出来，放到 mutation 中，这些函数定义成 action]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jacascript几种继承的理解]]></title>
    <url>%2F2017%2F06%2F18%2Fjicheng%2F</url>
    <content type="text"><![CDATA[组合继承（最常用）目前我们的借用构造函数方式还是有问题（无法实现函数复用) 1.具体实现 123456789101112131415161718function Super()&#123; // 只在此处声明基本属性和引用属性 this.val = 1; this.arr = [1];&#125;// 在此处声明函数Super.prototype.fun1 = function()&#123;&#125;;Super.prototype.fun2 = function()&#123;&#125;;//Super.prototype.fun3...function Sub()&#123; Super.call(this); // 核心 // ...&#125;Sub.prototype = new Super(); // 核心 var sub1 = new Sub(1);var sub2 = new Sub(2);alert(sub1.fun === sub2.fun); // true 2核心 把实例函数都放在原型对象上，以实现函数复用。同时还要保留借用构造函数方式的优点，通过Super.call(this);继承父类的基本属性和引用属性并保留能传参的优点；通过Sub.prototype = new Super();继承父类函数，实现函数复用 3 优缺点 优点：不存在引用属性共享问题可传参函数可复用缺点:（一点小瑕疵）子类原型上有一份多余的父类实例属性，因为父类构造函数被调用了两次，生成了两份，而子类实例上的那一份屏蔽了子类原型上的。。。又是内存浪费，比刚才情况好点，不过确实是瑕疵P.S.如果无法理解这个”多余“，可以查看黯羽轻扬：JS学习笔记2_面向对象，文章末尾有更详细的解释 寄生组合继承（最佳方式）对组合继承的优化，解决组合继承的瑕疵，进一步追求完美 1.具体实现 12345678910111213141516171819202122232425function beget(obj)&#123; // 生孩子函数 beget：龙beget龙，凤beget凤。 var F = function()&#123;&#125;; F.prototype = obj; return new F();&#125;function Super()&#123; // 只在此处声明基本属性和引用属性 this.val = 1; this.arr = [1];&#125;// 在此处声明函数Super.prototype.fun1 = function()&#123;&#125;;Super.prototype.fun2 = function()&#123;&#125;;//Super.prototype.fun3...function Sub()&#123; Super.call(this); // 核心 // ...&#125;var proto = beget(Super.prototype); // 核心proto.constructor = Sub; // 核心Sub.prototype = proto; // 核心 var sub = new Sub();alert(sub.val);alert(sub.arr); 2 核心 用beget(Super.prototype);切掉了原型对象上多余的那份父类实例属性P.S.啥？没看明白？哦哦~，忘记说原型式和寄生式继承了，就说怎么总觉得忘了锁门。。这记性P.S.寄生组合式继承，这名字不是很贴切，和寄生式继承关系并不是特别大 3 优缺点 优点：完美了缺点：理论上没有了（如果用起来麻烦不算缺点的话。。）P.S.用起来麻烦是一方面，另一方面是因为寄生组合式继承出现的比较晚，是21世纪初的东西，大家等不起这么久，所以组合继承是最常用的，而这个理论上完美的方案却只是课本上的最佳方式了 原创地址：http://www.cnblogs.com/ayqy/p/4471638.html]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>继承</tag>
      </tags>
  </entry>
</search>